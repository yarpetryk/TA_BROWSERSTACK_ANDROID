{"name": "test_login_empty_input", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot activate 'com.powerfox.powerfox'. Original error: Error executing adbExec. Original error: 'Command 'android-sdk/platform-tools/adb -P 5037 -s R5CT11ZX8KV shell monkey -p com.powerfox.powerfox -c android.intent.category.LAUNCHER 1' exited with code 252'; Stderr: 'args: [-p, com.powerfox.powerfox, -c, android.intent.category.LAUNCHER, 1]\n arg: \"-p\"\n arg: \"com.powerfox.powerfox\"\n arg: \"-c\"\n arg: \"android.intent.category.LAUNCHER\"\n arg: \"1\"\ndata=\"com.powerfox.powerfox\"\ndata=\"android.intent.category.LAUNCHER\"'; Code: '252'\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot activate 'com.powerfox.powerfox'. Original error: Error executing adbExec. Original error: 'Command '/usr/local/.browserstack/android-sdk/platform-tools/adb -P 5037 -s R5CT11ZX8KV shell monkey -p com.powerfox.powerfox -c android.intent.category.LAUNCHER 1' exited with code 252'; Stderr: 'args: [-p, com.powerfox.powerfox, -c, android.intent.category.LAUNCHER, 1]\n arg: \"-p\"\n arg: \"com.powerfox.powerfox\"\n arg: \"-c\"\n arg: \"android.intent.category.LAUNCHER\"\n arg: \"1\"\ndata=\"com.powerfox.powerfox\"\ndata=\"android.intent.category.LAUNCHER\"'; Code: '252'\n    at getResponseForW3CError (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-base-driver/lib/protocol/errors.js:804:9)\n    at asyncHandler (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-base-driver/lib/protocol/protocol.js:392:37)", "trace": "self = <appium.webdriver.webdriver.WebDriver (session=\"00ec4e1079e1d78cc05936b5431c45111fc38999\")>, app_id = 'com.powerfox.powerfox'\n\n    def activate_app(self, app_id: str) -> 'WebDriver':\n        \"\"\"Activates the application if it is not running\n        or is running in the background.\n    \n        Args:\n            app_id: the application id to be activated\n    \n        Returns:\n            Union['WebDriver', 'Applications']: Self instance\n        \"\"\"\n        ext_name = 'mobile: activateApp'\n        try:\n>           self.assert_extension_exists(ext_name).execute_script(\n                ext_name,\n                {\n                    'appId': app_id,\n                    'bundleId': app_id,\n                },\n            )\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/appium/webdriver/extensions/applications.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"00ec4e1079e1d78cc05936b5431c45111fc38999\")>, script = 'mobile: activateApp'\nargs = ({'appId': 'com.powerfox.powerfox', 'bundleId': 'com.powerfox.powerfox'},), converted_args = [{'appId': 'com.powerfox.powerfox', 'bundleId': 'com.powerfox.powerfox'}]\ncommand = 'w3cExecuteScript'\n\n    def execute_script(self, script, *args):\n        \"\"\"\n        Synchronously Executes JavaScript in the current window/frame.\n    \n        :Args:\n         - script: The JavaScript to execute.\n         - \\\\*args: Any applicable arguments for your JavaScript.\n    \n        :Usage:\n            ::\n    \n                driver.execute_script('return document.title;')\n        \"\"\"\n        if isinstance(script, ScriptKey):\n            try:\n                script = self.pinned_scripts[script.id]\n            except KeyError:\n                raise JavascriptException(\"Pinned script could not be found\")\n    \n        converted_args = list(args)\n        command = Command.W3C_EXECUTE_SCRIPT\n    \n>       return self.execute(command, {\n            'script': script,\n            'args': converted_args})['value']\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:492: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"00ec4e1079e1d78cc05936b5431c45111fc38999\")>, driver_command = 'w3cExecuteScript'\nparams = {'args': [{'appId': 'com.powerfox.powerfox', 'bundleId': 'com.powerfox.powerfox'}], 'script': 'mobile: activateApp'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10f151360>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"unknown command\",\"message\":\"Unknown mobile command \\\\\"activateApp\\\\\". Onl...re/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-base-driver/lib/protocol/protocol.js:309:21)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        try:\n            payload_dict = json.loads(payload)\n        except (json.JSONDecodeError, TypeError):\n            return\n        if not isinstance(payload_dict, dict):\n            return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.UnknownMethodException: Message: Unknown mobile command \"activateApp\". Only shell,scrollBackTo,viewportScreenshot,deepLink,startLogsBroadcast,stopLogsBroadcast,acceptAlert,dismissAlert,batteryInfo,deviceInfo,changePermissions,getPermissions,performEditorAction,startScreenStreaming,stopScreenStreaming,getNotifications,listSms,type commands are supported.\nE       Stacktrace:\nE       UnknownCommandError: Unknown mobile command \"activateApp\". Only shell,scrollBackTo,viewportScreenshot,deepLink,startLogsBroadcast,stopLogsBroadcast,acceptAlert,dismissAlert,batteryInfo,deviceInfo,changePermissions,getPermissions,performEditorAction,startScreenStreaming,stopScreenStreaming,getNotifications,listSms,type commands are supported.\nE           at AndroidUiautomator2Driver.executeMobile (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/lib/commands/general.js:139:11)\nE           at AndroidUiautomator2Driver.execute (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/execute.js:11:23)\nE           at commandExecutor (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/node_modules/appium-base-driver/lib/basedriver/driver.js:330:9)\nE           at /nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/node_modules/async-lock/lib/index.js:125:12\nE           at AsyncLock._promiseTry (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/node_modules/async-lock/lib/index.js:249:31)\nE           at exec (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/node_modules/async-lock/lib/index.js:124:9)\nE           at AsyncLock.acquire (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/node_modules/async-lock/lib/index.js:140:3)\nE           at AndroidUiautomator2Driver.executeCommand (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-uiautomator2-driver/node_modules/appium-base-driver/lib/basedriver/driver.js:343:39)\nE           at AppiumDriver.executeCommand (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/lib/appium.js:534:36)\nE           at processTicksAndRejections (internal/process/task_queues.js:97:5)\nE           at asyncHandler (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-base-driver/lib/protocol/protocol.js:309:21)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:122: UnknownMethodException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_login.TestLogin object at 0x10f0641f0>, driver = <appium.webdriver.webdriver.WebDriver (session=\"00ec4e1079e1d78cc05936b5431c45111fc38999\")>\n\n    @pytest.mark.login_negative\n    def test_login_empty_input(self, driver):\n        # Initialization\n>       self.init(driver)\n\ntests/test_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_login.py:15: in init\n    clear_data_and_run_app(self.driver)\nhelpers/common_steps.py:32: in clear_data_and_run_app\n    driver.activate_app(str(config_importer.config_package_name()))\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/appium/webdriver/extensions/applications.py:232: in activate_app\n    self.mark_extension_absence(ext_name).execute(Command.ACTIVATE_APP, {'appId': app_id})\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10f151360>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...re/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-base-driver/lib/protocol/protocol.js:392:37)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        try:\n            payload_dict = json.loads(payload)\n        except (json.JSONDecodeError, TypeError):\n            return\n        if not isinstance(payload_dict, dict):\n            return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot activate 'com.powerfox.powerfox'. Original error: Error executing adbExec. Original error: 'Command 'android-sdk/platform-tools/adb -P 5037 -s R5CT11ZX8KV shell monkey -p com.powerfox.powerfox -c android.intent.category.LAUNCHER 1' exited with code 252'; Stderr: 'args: [-p, com.powerfox.powerfox, -c, android.intent.category.LAUNCHER, 1]\nE        arg: \"-p\"\nE        arg: \"com.powerfox.powerfox\"\nE        arg: \"-c\"\nE        arg: \"android.intent.category.LAUNCHER\"\nE        arg: \"1\"\nE       data=\"com.powerfox.powerfox\"\nE       data=\"android.intent.category.LAUNCHER\"'; Code: '252'\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot activate 'com.powerfox.powerfox'. Original error: Error executing adbExec. Original error: 'Command '/usr/local/.browserstack/android-sdk/platform-tools/adb -P 5037 -s R5CT11ZX8KV shell monkey -p com.powerfox.powerfox -c android.intent.category.LAUNCHER 1' exited with code 252'; Stderr: 'args: [-p, com.powerfox.powerfox, -c, android.intent.category.LAUNCHER, 1]\nE        arg: \"-p\"\nE        arg: \"com.powerfox.powerfox\"\nE        arg: \"-c\"\nE        arg: \"android.intent.category.LAUNCHER\"\nE        arg: \"1\"\nE       data=\"com.powerfox.powerfox\"\nE       data=\"android.intent.category.LAUNCHER\"'; Code: '252'\nE           at getResponseForW3CError (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-base-driver/lib/protocol/errors.js:804:9)\nE           at asyncHandler (/nix/store/a4f03fnyb1njsg95d11hrirds8hfjsc1-appium-1.17.0/node_modules/appium-base-driver/lib/protocol/protocol.js:392:37)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:122: WebDriverException"}, "attachments": [{"name": "log", "source": "226dde6f-032a-465a-8aa2-ecb8de90be7c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "dbbda3fc-819b-46ef-98cc-e90c0b19efb7-attachment.txt", "type": "text/plain"}], "start": 1693146518214, "stop": 1693146518821, "uuid": "1418f317-a198-498a-ad8c-4527d0c510d1", "historyId": "05603206456e4809964169438552e439", "testCaseId": "f352a75c52f7b26ebfd83a491ec0fff9", "fullName": "tests.test_login.TestLogin#test_login_empty_input", "labels": [{"name": "tag", "value": "login_negative"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "ypetryk-MacBook-Pro.local"}, {"name": "thread", "value": "3663-0"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}